"""
1) Elegir carpeta origen
2) Elegir carpeta destino
3) confirmacion: "se copiaran x servicios sin factura de la carpeta <origen> a la carpeta <destino>. desea continuar?"
4) "se copiaran x csrpetas de servicios a carpeta destino"


Hacer tipo TDD pero "inverso"? Hacer el código, armar los tests y luego 
refactorearlo? Capaz sirve como introducción a TDD


mepa q conviene poner nombres de varaibles y demas en español para adaptarlo al 
contexto dalla valle srl

1


1) todos los remitos que tiene de nombre x falta poner precio
"""

import pathlib


def choose_source_folder():
    source_path = input("Ingrese la ubicación de la carpeta origen: ")
    return source_path


def choose_destination_folder():
    destination_path = input("Ingrese la ubicación de la carpeta destino: ")
    return destination_path


def get_folders_without_invoice(source_folder):
    print("Analizando la carpeta destino...")

    INVOICE_PATTERN = "factura*"

    services_without_invoice = []

    administration_folder = pathlib.Path(source_folder)
    
    # TODO: 
    # - Agregar exception handling cuando interactuo con sistemas externos
    # (ej, cuando hago llamadas al SO).
    # - Ver tema del NotADirectoryError cuando toma un elemento que
    # no es un directorio.
    # - Qué pasa cuando un dir está vacío? parece que no se rompe.
    # - Preguntar si hay que mover directorios vacíos tmb (o sea, que no
    # tienen remito). Por el momento, voy a tomar que sí.
    # - Ver si paso todas las constantes a un archivo de config.
    # - Más adelante ver si me conviene pasarlo a OOP (o sea, si se volvió
    # spaghetti code) o si lo mantengo en paradigma procedural.
    
    # TODO:
    # - Acá mepa que conviene cambiar el nombre de "administration_folder" a 
    # "administration_object".
    # - Tmb analizar si no me conviene dejar el código en español para 
    # adaptarlo al contexto de la empresa de papá. Por el momento, seguirlo en
    # inglés y luego ver si paso el código a español.
    # - ver si valido los inputs y hacer el programa APB.
    # - concentrarme en lograr el mvp
    for administration_object in administration_folder.iterdir():
        if administration_object.is_dir():
            for building_object in administration_object.iterdir():
                if building_object.is_dir():
                    for service_object in building_object.iterdir():
                        if service_object.is_dir():
                            invoices = list(service_object.glob(INVOICE_PATTERN))
                            if not invoices:
                                services_without_invoice.append(service_object)

    return services_without_invoice


def inform_copy_completion():
    input("Presione Enter para finalizar el programa.")


def inform_copy_cancellation():
    print("Se canceló el proceso de copia.")
    input("Presione Enter para finalizar el programa.")


def main():
    source_folder = choose_source_folder()
    # TODO: Validar inputs de terceros y usuario (que sea un file path valido, etc)?
    destination_folder = choose_destination_folder()

    folders_without_invoice = get_folders_without_invoice(source_folder)

    confirmed = ask_for_confirmation()

    if confirmed:
        # habria que validar si ya existn los files en dichas folders antes de sobreescribir
        copy_folders_without_invoice()
        inform_copy_completion()
    else:
        inform_copy_cancellation()


if __name__ == "__main__":
    main()  # Ver si agrego sys.exit, codigos de finalización y aplico ppios unix.
